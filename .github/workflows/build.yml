name: Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '30 5 1,15 * *'

jobs:

  build-test-image:
    name: Build Image for Testing & Scanning
    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/oct8l/apt-cacher-ng:${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  test-integration:
      name: Integration tests (${{ matrix.platform }})
      needs: [build-test-image]
      runs-on: ubuntu-latest
      strategy:
        matrix:
          platform: 
            - linux/amd64
            - linux/arm64
      
      permissions:
        packages: read

      steps:

        - name: Checkout git repo
          uses: actions/checkout@v4

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
          
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to ghcr.io registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build multi-arch test image
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: ghcr.io/oct8l/apt-cacher-ng:${{ github.run_id }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: ${{ matrix.platform }}

        - name: Create test docker-compose.yml
          run: |
            PLATFORM_TAG="${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}"
            cat > docker-compose.test.yml << EOF
            version: '3'
            services:
              apt-cacher-ng:
                image: ghcr.io/oct8l/apt-cacher-ng:${{ github.run_id }}-\${PLATFORM_TAG}
                platform: ${{ matrix.platform }}
                init: true
                ports:
                  - "3142:3142"
                volumes:
                  - apt-cacher-data:/var/cache/apt-cacher-ng
                  - apt-cacher-logs:/var/log/apt-cacher-ng
                healthcheck:
                  test: ["CMD", "wget", "-q", "-t1", "-O", "/dev/null", "http://localhost:3142/acng-report.html"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 30s

              test-client:
                image: debian:bookworm-slim
                depends_on:
                  apt-cacher-ng:
                    condition: service_healthy
                volumes:
                  - ./tests:/tests
                command: sleep infinity

            volumes:
              apt-cacher-data:
              apt-cacher-logs:
            EOF

        - name: Create test scripts
          run: |
            mkdir -p tests

            # Main test script
            cat > tests/run_tests.sh << 'EOF'
            #!/bin/bash
            set -e
            set -x

            echo "=== Starting apt-cacher-ng integration tests ==="

            # Configure apt to use the proxy
            echo 'Acquire::HTTP::Proxy "http://apt-cacher-ng:3142";' > /etc/apt/apt.conf.d/01proxy
            echo 'Acquire::HTTPS::Proxy "false";' >> /etc/apt/apt.conf.d/01proxy

            echo "=== Test 1: Basic apt update through proxy ==="
            apt-get update

            echo "=== Test 2: Install a small package (cache miss) ==="
            apt-get install -y curl
            curl --version

            echo "=== Test 3: Verify proxy is working by checking logs ==="
            # Check that the proxy service is responding
            curl -f -s -o /dev/null "http://apt-cacher-ng:3142/acng-report.html"
            echo "Proxy health check passed"

            echo "=== Test 4: Test cache hit by reinstalling same package ==="
            apt-get remove -y curl
            apt-get clean
            apt-get update
            # This should be faster as it hits the cache
            time apt-get install -y curl

            echo "=== Test 5: Install multiple packages ==="
            apt-get install -y wget nano
            wget --version
            nano --version

            echo "=== Test 6: Verify proxy statistics ==="
            # Get proxy statistics to ensure it's actually proxying
            curl -f -s "http://apt-cacher-ng:3142/acng-report.html" | grep -q -i -E "(apt-cacher|report|status|cache)" || {
                echo "ERROR: Could not access proxy statistics page"
                exit 1
            }
            echo "Proxy statistics page accessible and contains expected content"

            echo "=== All tests passed! ==="
            EOF

            chmod +x tests/run_tests.sh

        - name: Show platform info
          run: |
            echo "Testing on platform: ${{ matrix.platform }}"
            echo "Docker platform: $(docker version --format '{{.Server.Arch}}')"
            if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
              echo "Running ARM64 tests via emulation"
            else
              echo "Running native AMD64 tests"
            fi

        - name: Start services and run tests
          run: |
            echo "Starting apt-cacher-ng service..."
            docker compose -f docker-compose.test.yml up -d

            echo "Waiting for services to be healthy..."
            timeout 60s docker compose -f docker-compose.test.yml exec -T apt-cacher-ng sh -c 'while ! wget -q -t1 -O /dev/null http://localhost:3142/acng-report.html; do sleep 2; done'

            echo "Running integration tests..."
            docker compose -f docker-compose.test.yml exec -T test-client /tests/run_tests.sh

        - name: Test proxy performance and caching
          run: |
            cat > tests/performance_test.sh << 'EOF'
            #!/bin/bash
            set -e

            echo "=== Performance and Caching Tests ==="

            # Configure apt to use the proxy
            echo 'Acquire::HTTP::Proxy "http://apt-cacher-ng:3142";' > /etc/apt/apt.conf.d/01proxy
            echo 'Acquire::HTTPS::Proxy "false";' >> /etc/apt/apt.conf.d/01proxy

            echo "=== Test cache performance ==="
            # First install (cache miss)
            echo "First install (cache miss):"
            time (apt-get update && apt-get install -y htop)

            # Remove and reinstall (cache hit)
            apt-get remove -y htop
            apt-get clean
            echo "Second install (cache hit - should be faster):"
            time (apt-get update && apt-get install -y htop)

            echo "Performance test completed"
            EOF

            chmod +x tests/performance_test.sh
            docker compose -f docker-compose.test.yml exec -T test-client /tests/performance_test.sh

        - name: Test error handling
          run: |
            cat > tests/error_test.sh << 'EOF'
            #!/bin/bash
            set -e

            echo "=== Error Handling Tests ==="

            # Configure apt to use the proxy
            echo 'Acquire::HTTP::Proxy "http://apt-cacher-ng:3142";' > /etc/apt/apt.conf.d/01proxy
            echo 'Acquire::HTTPS::Proxy "false";' >> /etc/apt/apt.conf.d/01proxy

            echo "=== Test handling of non-existent package ==="
            if apt-get install -y nonexistent-package-12345 2>/dev/null; then
                echo "ERROR: Should have failed to install non-existent package"
                exit 1
            else
                echo "Correctly handled non-existent package"
            fi

            echo "Error handling test completed"
            EOF

            chmod +x tests/error_test.sh
            docker compose -f docker-compose.test.yml exec -T test-client /tests/error_test.sh

        - name: Verify logs and collect diagnostics
          run: |
            echo "=== Collecting apt-cacher-ng logs ==="
            docker compose -f docker-compose.test.yml logs apt-cacher-ng

            echo "=== Checking proxy statistics ==="
            docker compose -f docker-compose.test.yml exec -T test-client curl -f -s "http://apt-cacher-ng:3142/acng-report.html" | head -50

        - name: Cleanup test environment
          if: always()
          run: |
            docker compose -f docker-compose.test.yml down -v
            rm -f docker-compose.test.yml
            rm -rf tests

  scan-image:
      name: Scan Image with Trivy
      needs: [build-test-image]
      runs-on: ubuntu-latest

      permissions:
        contents: read
        packages: read
        security-events: write

      steps:

        - name: Checkout git repo
          uses: actions/checkout@v4

        - name: Login to ghcr.io registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Pull image to scan
          run: docker pull ghcr.io/oct8l/apt-cacher-ng:"$GITHUB_RUN_ID"

        - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ghcr.io/oct8l/apt-cacher-ng:${{ github.run_id }}
            exit-code: 0
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'HIGH,CRITICAL'
            format: 'sarif'
            output: 'results.sarif'

        - name: Upload Trivy scan results to GitHub Security tab
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: results.sarif
            category: results

  build-and-push-docker-image:
    name: Build and Push Docker Image
    needs: [test-integration, scan-image]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/oct8l/apt-cacher-ng
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            latest

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Packages
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image and push to container registries
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
